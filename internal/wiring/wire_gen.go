// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"GoLoad/internal/configs"
	"GoLoad/internal/dataaccess"
	"GoLoad/internal/dataaccess/cache"
	"GoLoad/internal/dataaccess/database"
	"GoLoad/internal/dataaccess/mq/producer"
	"GoLoad/internal/handler"
	"GoLoad/internal/handler/grpc"
	"GoLoad/internal/logic"
	"GoLoad/internal/utils"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeGRPCServer(path configs.ConfigFilePath) (grpc.Server, func(), error) {
	config, err := configs.NewConfig(path)
	if err != nil {
		return nil, nil, err
	}
	configsDatabase := config.Database
	db, cleanup, err := database.InitializeDB(configsDatabase)
	if err != nil {
		return nil, nil, err
	}
	goquDatabase := database.InitializeGoquDB(db)
	log := config.Log
	logger, cleanup2, err := utils.InitializeLogger(log)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	accountDataAccessor := database.NewAccountDataAccessor(goquDatabase, logger)
	accountPasswordDataAccessor := database.NewAccountPasswordDataAccessor(goquDatabase, logger)
	auth := config.Auth
	hash := logic.NewHash(auth)
	configsCache := config.Cache
	client := cache.NewRedisClient(configsCache, logger)
	tokenPublicKey := cache.NewTokenPublicKey(client, logger)
	tokenPublicKeyDataAccessor := database.NewTokenPublicKeyDataAccessor(goquDatabase, logger)
	token, err := logic.NewToken(accountDataAccessor, tokenPublicKey, tokenPublicKeyDataAccessor, auth, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	account := logic.NewAccount(goquDatabase, accountDataAccessor, accountPasswordDataAccessor, hash, token)
	downloadTaskDataAccessor := database.NewDownloadTaskDataAccessor(goquDatabase, logger)
	mq := config.MQ
	producerClient, err := producer.NewClient(logger, mq)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	downloadTaskCreatedProducer := producer.NewDownloadTaskCreatedProducer(producerClient, logger)
	downloadTask := logic.NewDownloadTask(logger, goquDatabase, token, downloadTaskDataAccessor, downloadTaskCreatedProducer)
	goLoadServiceServer := grpc.NewHandler(account, downloadTask)
	server := grpc.NewServer(goLoadServiceServer)
	return server, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var WireSet = wire.NewSet(configs.WireSet, dataaccess.WireSet, utils.WireSet, logic.WireSet, handler.WireSet)
